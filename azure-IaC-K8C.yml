# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

resources:
- repo: self
pool:
  vmImage: ubuntu-latest

variables:
  tag: '$(Build.BuildId)'
steps:
- script: echo K8S Terraform Azure
  displayName: 'Run a one-line script'
# secure file saved in Pipelines -> Library -> Secure file
- task: DownloadSecureFile@1
  name: publickey
  inputs:
    secureFile: 'azure_rsa.pub'
- task: TerraformCLI@0
  inputs:
    command: 'init'
    workingDirectory: '$(System.DefaultWorkingDirectory)/azure_iac'
    backendType: 'azurerm'
    backendServiceArm: 'azure-connection'
    ensureBackend: true
    backendAzureRmResourceGroupName: 'terraform-backend-rg'
    backendAzureRmResourceGroupLocation: 'westeurope'
    backendAzureRmStorageAccountName: 'staccountcrepic870609'
    backendAzureRmContainerName: 'staccountcrepic870609container'
    backendAzureRmKey: 'kubernetes-dev.tfstate'
    allowTelemetryCollection: false
- task: TerraformCLI@0
  inputs:
    command: 'apply'
    workingDirectory: '$(System.DefaultWorkingDirectory)/azure_iac'
    environmentServiceName: 'azure-connection'
    commandOptions: '-var client_id=$(client_id) -var client_secret=$(client_secret) -var ssh_public_key=$(publickey.secureFilePath)'
    allowTelemetryCollection: false

# # added forceunlock as pipeline would not complete
# - task: TerraformCLI@0
#   inputs:
#     command: 'forceunlock'
#     workingDirectory: '$(System.DefaultWorkingDirectory)/configuration/iaac/azure/kubernetes'
# #     lockID: 'c1ab89c5-51aa-4aed-daab-2e0fb97dc9c9'
# - task: TerraformCLI@0
#   inputs:
#     command: 'destroy'
#     workingDirectory: '$(System.DefaultWorkingDirectory)/configuration/iaac/azure/kubernetes'
#     environmentServiceName: 'azure-resource-manager-service-connection'
#     commandOptions: '-var client_id=$(client_id) -var client_secret=$(client_secret) -var ssh_public_key=$(publickey.secureFilePath)'